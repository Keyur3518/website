<h1>Documentation</h1>

<h2 id="table-of-contents">Table of Contents</h2>

<ul>
  <li><a href="#introduction">Introduction</a></li>
  <li>
    <a href="#usage">Usage</a>
    <ul>
      <li><a href="#generating-a-parser">Generating a Parser</a></li>
      <li><a href="#using-the-generated-parser">Using the Generated Parser</a></li>
    </ul>
  </li>
  <li>
    <a href="#grammar">Grammar</a>
    <ul>
      <li><a href="#parsing-expression-types">Parsing Expression Types</a></li>
    </ul>
  </li>
  <li><a href="#compatibility">Compatibility</a></li>
</ul>

<h2 id="introduction">Introduction</h2>

<p>PEG.js is a parser generator for JavaScript based on the
<a href="http://en.wikipedia.org/wiki/Parsing_expression_grammar">parsing expression grammar</a>
formalism. It is designed to be used either from your browser, from JavaScript
code, or from a command line (using
<a href="http://www.mozilla.org/rhino/">Rhino</a>
JavaScript interpreter).</p>

<h2 id="usage">Usage</h2>

<p>Using PEG.js is easy:</p>

<pre><code>var parser = PEG.buildParser("start = ('a' / 'b')+");
parser.parse("abba"); // returns ["a", "b", "b", "a"]
parser.parse("abcd"); // throws an exception with details about the error</code></pre>

<p>Basically, you need to generate a parser from your grammar and then use it to
parse the input.</p>

<h3 id="generating-a-parser">Generating a Parser</h3>

<p>There are three ways how to generate the parser:</p>

<ol>
  <li>Using the <a href="online">online generator</a></li>
  <li>Using the <code>PEG.buildParser</code> function from JavaScript code</li>
  <li>Using the command line</li>
</ol>

<p>The <a href="online">online generator</a> is easiest to use &mdash; you just
enter your grammar and download the generated parser code. The parser object
will be available in a global variable you specify (<code>parser</code> by
default).</p>

<p>To generate the parser from JavaScript code, include the
<code>lib/compiler.js</code> file and use the <code>PEG.buildParser</code>
function.  This function accepts a string with a grammar and either returns the
built parser object or throws an exception if the grammar is invalid.</p>

<p>To generate the parser from a command line, you need to have Java installed
(so that <a href="http://www.mozilla.org/rhino/">Rhino</a> &mdash; which is
included in PEG.js &mdash; can run). Use the <code>bin/pegjs</code> script on
Unix or <code>bin/pegjs.bat</code> batch file on Windows:</p>

<pre><code>$ bin/pegjs arithmeticsParser examples/arithmetics.pegjs</code></pre>

<p>This command will create the parser from the
<code>examples/arithmetics.pegjs</code> file and put in into the
<code>examples/arithmetics.js</code> file. The parser object will be available
in the <code>arithmeticsParser</code> global variable. To learn more about the
generator usage, use  the <code>--help</code> option.</p>

<h3 id="using-the-generated-parser">Using the Generated Parser</h3>

<p>To use the generated parser, include the generated file (unless you built the
parser straight from the JavaScript code using <code>PEG.buildParser</code>) and
use the <code>parse</code> method on the parser object. This method accepts an
input string and either returns the parse result (dependent on the actions you
specified in the grammar) or throws <code>PEG.grammarParser.SyntaxError</code>
exception if the input contains a syntax error. The exception has properties
<code>message</code>, <code>line</code> and <code>column</code>, which contain
details about the error.</p>

<p>The parser object also has the <code>toSource</code> method that returns its
textual representation.</p>

<h2 id="grammar">Grammar</h2>

<p>The grammar syntax is similar to JavaScript in that it is not line-oriented
and ignores whitespace between tokens. You can also use JavaScript-style
comments (<code>// ...</code> and <code>/* ... */</code>).</p>

<p>Let's look at an example grammar, which recognizes simple arithmetic
expressions like <code>2*(3+4)</code>. The parser generated from this grammar
then computes their value.</p>

<pre><code>/*
 * Classic example grammar, which recognizes simple arithmetic expressions like
 * "2*(3+4)". The parser generated from this grammar then computes their value.
 */

start
  = additive

additive
  = left:multiplicative "+" right:additive { return left + right; }
  / multiplicative

multiplicative
  = left:primary "*" right:multiplicative { return left * right; }
  / primary

primary
  = integer
  / "(" additive:additive ")" { return additive; }

integer "integer"
  = digits:[0-9]+ { return parseInt(digits.join(""), 10); }</code></pre>

<p>On the top level, the grammar consists of <em>rules</em> (in our example,
there are five of them). Each rule contains a <em>name</em> (e.g.
<code>integer</code>), which identifies the rule, and a <em>parsing
expression</em> (e.g. <code>digits:[0-9]+ { return parseInt(digits.join(""), 10);
}</code>), which prescribes a pattern to match against the input text and
possibly contains some JavaScript code that determines what happens when the
pattern matches successfully. A rule can also contain <em>human-readable
name</em>, which is used in error messages (in our example, only the
<code>integer</code> rule has a human-readable name). The parsing starts at the
first rule, which is also called the <em>start rule</em>.</p>

<p>Rules can be preceded by an <em>initializer</em> &mdash; a piece of
JavaScript code in curly braces ("{" and "}"). This code is executed before the
generated parser starts parsing. All variables and functions defined in the
initializer are accessible in <a href="#action">rule actions</a> and <a
href="#semantic-predicate">semantic predicates</a>. Curly braces in the
initializer code must be balanced.</p>

<p class="center">
  <img src="/img/rule.png" width="742" height="100" alt="PEG.js grammar rule">
</p>

<p>A rule name must be a JavaScript identifier and it is followed by an equality
sign ("=") and a parsing expression. If the rule has a human-readable name, it
is written as a JavaScript string between the name and separating equality sign.
Rules need to be separated only by whitespace (their beginning is easily
recognizable), but a semicolon (";") after the parsing expression is
allowed.</p>

<p>The parsing expressions of the rules are used to match the input text to the
grammar. There are various types of expressions &mdash; matching characters or
character classes, indicating optional parts and repetition, etc. (see <a
href="#parsing-expression-types">description below</a>). Expressions can also
contain references to other rules.</p>

<p>If an expression successfully matches a part of the text when running the
generated parser, it produces a <em>match result</em>, which is a JavaScript
value. For example:</p>

<ul>
  <li>An expression matching a literal string produces a JavaScript string
  containing matched part of the input.</li>

  <li>An expression matching repeated occurrence of some subexpression produces
  a JavaScript array with all the matches.</li>
</ul>

<p>The match results propagate through the rules when the rule names are used in
expressions, up to the start rule. The generated parser returns start rule's
match result when parsing is successful.</p>

<p>One special case of parser expression is a <em>parser action</em> &mdash; a
piece of JavaScript code inside curly braces ("{" and "}"), which gets match
results of some of the the preceding expressions in its arguments and can return
a JavaScript value. This value will be considered as a match result of the
preceding expression (in other words, the parser actions are basically match
result transformers).</p>

<p>In our arithmetics example, there are many parser actions. Consider the
action in expression <code>digits:[0-9]+ { return parseInt(digits.join(""), 10);
}</code>. It takes the match result of the expression <code>[0-9]+</code>, which
is an array of strings containing digits, as its parameter. It joins the digits
together to form a number and converts it to a JavaScript <code>number</code>
object.</p>

<h3 id="parsing-expression-types">Parsing Expression Types</h3>

<p>There are several types of parsing expressions, some of them containing
subexpressions and thus forming a recursive structure:</p>

<dl>
  <dt><code><em>rule</em></code></dt>
  <dd>Match a parsing expression of a rule recursively and return its match
  result.</dd>

  <dt>
    <code>"<em>literal</em>"</code><br>
    <code>'<em>literal</em>'</code>
  </dt>

  <dd>Match exact literal string and return it. The string syntax is the same as
  in JavaScript.</dd>

  <dt><code>.</code></dt>
  <dd>Match exactly one character and return it as a string.</dd>

  <dt><code>[<em>characters</em>]</code></dt>

  <dd>Match one character from a set and return it as a string. The characters
  in the list can be escaped in exactly the same way as in JavaScript string.
  The list of characters can also contain ranges, e.g. <code>a-z</code>.
  Preceding the characters with <code>^</code> inverts the matched set (e.g.
  <code>[^a-z]</code>).</dd>

  <dt><code>( <em>expression</em> )</code></dt>

  <dd>Match a subexpression and return its match result.</dd>

  <dt><code><em>expression</em> *</code></dt>

  <dd>Match zero or more repetitions of the expression and return their match
  results in an array. The matching is greedy, i.e. the parser tries to match as
  much expressions as possible.</dd>

  <dt><code><em>expression</em> +</code></dt>

  <dd>Match one or more repetitions of the expression and return their match
  results in an array. The matching is greedy, i.e. the parser tries to match as
  much expressions as possible.</dd>

  <dt><code><em>expression</em> ?</code></dt>

  <dd>Try to match the expression. If the match succeeds, return its match
  result, otherwise return an empty string.</dd>

  <dt><code>& <em>expression</em></code></dt>

  <dd>Try to match the expression and if the match succeeds, just return an
  empty string and do not advance the parser position, otherwise consider the
  match failed.</dd>

  <dt><code>! <em>expression</em></code></dt>

  <dd>Try to match the expression and if the match does not succeed, just return
  an empty string and do not advance the parser position, otherwise consider the
  match failed.</dd>

  <dt id="semantic-predicate"><code>& { <em>predicate</em> }</code></dt>

  <dd>
    <p>The predicate is a piece of JavaScript code that is executed as if it was
    inside a function. The predicate should return some JavaScript value using
    the <code>return</code> statement. If the returned value evaluates to
    <code>true</code> in boolean context, just return an empty string and do not
    advance the parser position; otherwise consider the match failed.</p>

    <p>The code inside the predicate has access to all variables and functions
    defined in the initializer at the beginning of the grammar. Curly braces in
    the predicate code must be balanced.</p>
  </dd>

  <dt><code>! { <em>predicate</em> }</code></dt>

  <dd>
    <p>The predicate is a piece of JavaScript code that is executed as if it was
    inside a function. The predicate should return some JavaScript value using
    the <code>return</code> statement. If the returned value evaluates to
    <code>false</code> in boolean context, just return an empty string and do not
    advance the parser position; otherwise consider the match failed.</p>

    <p>The code inside the predicate has access to all variables and functions
    defined in the initializer at the beginning of the grammar. Curly braces in
    the predicate code must be balanced.</p>
  </dd>

  <dt><code><em>label</em> : <em>expression</em></code></dt>

  <dd>
    <p>Match the expression and remember its match result under a given lablel.
    The label must be a JavaScript identifier.</p>

    <p>Labeled expressions are useful only together with <a
    href="#action">actions</a>, where saved match results can be accessed by
    action's JavaScript code.</p>
  </dd>

  <dt><code><em>expression<sub>1</sub></em> <em>expression<sub>2</sub></em> ...  <em>expression<sub>n</sub></em></code></dt>

  <dd>Match a sequence of expression and return their match results in an array.</dd>

  <dt id="action"><code><em>expression</em> { <em>action</em> }</code></dt>

  <dd>
    <p>Match the expression and if the match is successful, run the action,
    otherwise consider the match failed.</p>

    <p>The action is a piece of JavaScript code that is executed as if it was
    inside a function. It gets the match results of labeled expressions in
    preceding expression as its arguments. The action should return some
    JavaScript value using the <code>return</code> statement. This value will be
    considered as the match result of the preceding expression. The action can
    return <code>null</code> to indicate a match failure.</p>

    <p>The code inside the action has access to all variables and functions
    defined in the initializer at the beginning of the grammar. Curly braces in
    the action code must be balanced.</p>
  </dd>

  <dt><code><em>expression<sub>1</sub></em> / <em>expression<sub>2</sub></em> / ... / <em>expression<sub>n</sub></em></code></dt>

  <dd>Try to match the first expression, if it does not succeed, try the
  second one, etc. Return the match result of the first successfully matched
  expression. If no expression matches, consider the match failed.</dd>
</dl>

<h2 id="compatibility">Compatibility</h2>

<p>Both the parser generator and generated parsers should run well in the
following environments:</p>

<ul>
  <li>IE6+</li>
  <li>Firefox</li>
  <li>Chrome</li>
  <li>Safari</li>
  <li>Opera</li>
  <li>Rhino</li>
</ul>
